[project]
name = "manman"
version = "0.1.0"
description = "Manman is a simple and fast web server for dockerfiles and k8s manifests generation."
authors = [
    { name = "Bogdan", email = "evstrat.bg@gmail.com" }
]
dependencies = [
    "litestar[standart]>=2.10.0",
    "pyyaml>=6.0.2",
    "jinja2>=3.1.4",
    "pydantic>=2.8.2",
    "pydantic-settings>=2.4.0",
    "orjson>=3.10.7",
    "uvicorn>=0.30.5",
    "cryptography>=43.0.0",
    "httpx>=0.27.0",
    "croniter>=3.0.3",
    "mypy>=1.11.1",
    "types-pyyaml>=6.0.12.20240808",
    "types-croniter>=3.0.3.20240731",
    "pytest-cov>=5.0.0",
    "pytest-sugar>=1.0.0",
    "pytest-asyncio>=0.23.8",
    "pytest-mock>=3.14.0",
    "pytest-fixture-classes>=1.0.3",
]
readme = "README.md"
LICENSE = "MIT"
requires-python = ">= 3.12"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = []

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/manman"]


[tool.coverage.run]
data_file = "coverage/coverage"
omit = [".venv/*"]


[tool.coverage.report]
fail_under = 100
skip_covered = true
skip_empty = true
omit = [".venv/*"]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    # Impossible to cover
    # It is impossible to cover "if TYPE_CHECKING" statements because they never actually run
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing\\.)?overload",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
unfixable = [
    "ERA001"    # eradicate: found commented out code can be dangerous if fixed automatically
]
select = [
    "F",        # pyflakes
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "C90",      # mccabe
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT003",   # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "T10",      # flake8-debugger
    "G010",     # Logging statement uses warn instead of warning
    "G201",     # Logging .exception(...) should be used instead of .error(..., exc_info=True)
    "G202",     # Logging statement has redundant exc_info
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "ERA",      # flake8-eradicate
    "PGH",      # pygrep-hooks
    "PLC0414",  # Import alias does not rename original package
    "PLE",      # Error
    "PLW",      # Warning
    "TRY",      # tryceratops
    "FLY",      # flynt
    "RUF",      # ruff-specific rules
    "ANN001",   # missing type annotation for arguments
    "ANN002",   # missing type annotation for *args
    "ANN003",   # missing type annotation for **kwargs,

]
ignore = [
    "RUF012", # Mutable class attributes should be annotated
    "A002",   # builtin shadowing in arguments
    "A003",   # builtin shadowing in attributes
    "D203",   # 1 blank line required before class docstring
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...`
    "ARG002", # Unused method argument
    "TRY003", # Avoid specifying long messages outside the exception class
    "ARG001", # Unused first argument
    "PT019",  # Fixture without value is injected as parameter, use @pytest.mark.usefixtures instead,
    "SIM108", # Use ternary operator
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S",        # ignore bandit security issues in tests
    "B018",     # ignore assert in tests
    "PT012",    # ignore complex with pytest.raises clauses
]


[tool.pytest.ini_options]
asyncio_mode = "auto"
log_level = "INFO"

[tool.diff_cover]
fail_under = 100
compare_branch = "origin/main"

[tool.mypy]
# Указывает версию Python, используемую в проекте.
python_version = "3.12"

# Предупреждает о неиспользуемых конфигурациях.
warn_unused_configs = true

# Запрещает вызовы функций без аннотаций типов.
disallow_untyped_calls = true

# Запрещает определения функций без аннотаций типов.
disallow_untyped_defs = true

# Запрещает частично аннотированные определения функций.
disallow_incomplete_defs = true

# Проверяет функции без аннотаций типов.
check_untyped_defs = true

# Включает строгую проверку опциональных типов.
strict_optional = true

# Запрещает неявное использование опциональных типов.
no_implicit_optional = true

# Предупреждает о избыточных преобразованиях типов.
warn_redundant_casts = true

# Предупреждает о неиспользуемых инструкциях ignore.
warn_unused_ignores = true

# Предупреждает, если функция возвращает тип Any.
warn_return_any = true

# Указывает директорию для кэша mypy.
cache_dir = ".mypy_cache"

# Исключает проверки в указанных файлах или папках (например, в тестах).
exclude = [
    "tests/.*",
    "data/.*",
]

# Список используемых плагинов.
plugins = [
    "pydantic.mypy"
]
# Игнорирует отсутствующие импорты в указанных модулях.
ignore_missing_imports = true

# Показывает номера колонок в сообщениях об ошибках.
show_column_numbers = true

# Показывает коды ошибок в сообщениях.
show_error_codes = true

# Форматирует вывод mypy в удобочитаемом виде.
pretty = false


[tool.pydantic-mypy]
# Включает поддержку pydantic для mypy.
init_forbid_extra = false
init_typed = true
